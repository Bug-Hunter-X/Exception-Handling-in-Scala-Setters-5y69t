```scala
class MyClass(val name: String) {
  private var _age: Int = 0

  def age: Int = _age

  def age_=(newAge: Int): Unit = {
    try {
      if (newAge >= 0) {
        _age = newAge
      } else {
        throw new IllegalArgumentException("Age cannot be negative")
      }
    } catch {
      case e: IllegalArgumentException =>
        println(s"Error setting age: ${e.getMessage}") // Handle the exception gracefully
        //Optionally: Log the error for debugging or monitoring 
    }
  }
}

object Main extends App {
  val myInstance = new MyClass("John")
  myInstance.age = 30
  println(myInstance.age) //prints 30
  myInstance.age = -5 //Prints error message but continues execution
}
```